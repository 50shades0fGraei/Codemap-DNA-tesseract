<div class="grid grid-cols-4 gap-4 p-4">
  {#each traits as trait}
    <button
      class="bg-indigo-600 text-white px-4 py-2 rounded hover:bg-indigo-800"
      on:click={() => toggleTrait(trait)}
    >
      {trait}
    </button>
  {/each}
</div>
<button
  class="mt-6 bg-green-500 text-white px-6 py-3 rounded hover:bg-green-700"
  on:click={invokeConvergence}
>
  Invoke Spiral Convergence
</button>
{#if convergence}
  <div class="mt-8 p-4 bg-gray-100 rounded shadow">
    <h2 class="text-xl font-bold">ðŸŒ€ Convergence Output</h2>
    <p><strong>Invocation Hash:</strong> {convergence.hash}</p>
    <p><strong>Resonance Score:</strong> {convergence.resonance}</p>
    <ul>
      {#each convergence.traits as trait}
        <li>{trait} â†’ {JSON.stringify(convergence.dimensions[trait])}</li>
      {/each}
    </ul>
  </div>
{/if}
<script>
  import { onMount } from 'svelte'

  let traits = [
    "Empathy", "Recursion", "Sovereignty", "Vigilance",
    "Entropy", "Integrity", "Expansion", "Reflection",
    "Adaptation", "Memory", "Intuition", "Precision", "Resonance"
  ]

  let selectedTraits = []
  let convergence = null

  function toggleTrait(trait) {
    if (selectedTraits.includes(trait)) {
      selectedTraits = selectedTraits.filter(t => t !== trait)
    } else {
      if (selectedTraits.length < 4) selectedTraits = [...selectedTraits, trait]
    }
  }

  async function invokeConvergence() {
    const outer = {
      traits: selectedTraits,
      planes: ["Emotion", "Logic", "Time", "Sovereignty"],
      duality: "Forward"
    }
    const inner = {
      traits: selectedTraits,
      planes: ["Logic", "Emotion", "Sovereignty", "Time"],
      duality: "Reverse"
    }

    const res = await fetch('/api/converge', {
      method: 'POST',
      body: JSON.stringify({ outer, inner }),
      headers: { 'Content-Type': 'application/json' }
    })
    convergence = await res.json()
  }
</script>